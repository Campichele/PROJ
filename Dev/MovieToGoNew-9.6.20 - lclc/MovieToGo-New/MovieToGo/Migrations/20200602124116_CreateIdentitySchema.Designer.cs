// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieToGo.Models;

namespace MovieToGo.Migrations
{
    [DbContext(typeof(MovieToGoDbContext))]
    [Migration("20200602124116_CreateIdentitySchema")]
    partial class CreateIdentitySchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoleClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("MovieToGo.Models.Acteurs", b =>
                {
                    b.Property<short>("IdActeur")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_ACTEUR")
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nom")
                        .HasColumnName("NOM")
                        .HasColumnType("char(32)")
                        .IsFixedLength(true)
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Prenom")
                        .HasColumnName("PRENOM")
                        .HasColumnType("char(32)")
                        .IsFixedLength(true)
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("IdActeur");

                    b.ToTable("ACTEURS");
                });

            modelBuilder.Entity("MovieToGo.Models.Commentaire", b =>
                {
                    b.Property<short>("IdCommentaire")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_COMMENTAIRE")
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Commentaire1")
                        .IsRequired()
                        .HasColumnName("COMMENTAIRE")
                        .HasColumnType("char(255)")
                        .IsFixedLength(true)
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<short>("IdFilm")
                        .HasColumnName("ID_FILM")
                        .HasColumnType("smallint");

                    b.Property<short>("IdUser")
                        .HasColumnName("ID_USER")
                        .HasColumnType("smallint");

                    b.Property<bool>("Statut")
                        .HasColumnName("STATUT")
                        .HasColumnType("bit")
                        .HasComment("en attente/approuvé");

                    b.HasKey("IdCommentaire");

                    b.HasIndex("IdFilm");

                    b.HasIndex("IdUser");

                    b.ToTable("COMMENTAIRE");
                });

            modelBuilder.Entity("MovieToGo.Models.Distributeur", b =>
                {
                    b.Property<short>("IdDistributeur")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_DISTRIBUTEUR")
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnName("NOM")
                        .HasColumnType("char(32)")
                        .IsFixedLength(true)
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("IdDistributeur");

                    b.ToTable("DISTRIBUTEUR");
                });

            modelBuilder.Entity("MovieToGo.Models.Droit", b =>
                {
                    b.Property<short>("IdDroit")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_DROIT")
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnName("NOM")
                        .HasColumnType("char(32)")
                        .IsFixedLength(true)
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("IdDroit");

                    b.ToTable("DROIT");
                });

            modelBuilder.Entity("MovieToGo.Models.FaitPartie", b =>
                {
                    b.Property<short>("IdGenre")
                        .HasColumnName("ID_GENRE")
                        .HasColumnType("smallint");

                    b.Property<short>("IdFilm")
                        .HasColumnName("ID_FILM")
                        .HasColumnType("smallint");

                    b.HasKey("IdGenre", "IdFilm");

                    b.HasIndex("IdFilm");

                    b.ToTable("FAIT_PARTIE");
                });

            modelBuilder.Entity("MovieToGo.Models.Film", b =>
                {
                    b.Property<short>("IdFilm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_FILM")
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateDeSortie")
                        .HasColumnName("DATE_DE_SORTIE")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("text");

                    b.Property<short>("Duree")
                        .HasColumnName("DUREE")
                        .HasColumnType("smallint");

                    b.Property<string>("Fichier")
                        .HasColumnName("FICHIER")
                        .HasColumnType("text");

                    b.Property<short>("IdDistributeur")
                        .HasColumnName("ID_DISTRIBUTEUR")
                        .HasColumnType("smallint");

                    b.Property<short>("IdLangue")
                        .HasColumnName("ID_LANGUE")
                        .HasColumnType("smallint");

                    b.Property<short>("IdNationalite")
                        .HasColumnName("ID_NATIONALITE")
                        .HasColumnType("smallint");

                    b.Property<short>("IdSousTitre")
                        .HasColumnName("ID_SOUS_TITRE")
                        .HasColumnType("smallint");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnName("NOM")
                        .HasColumnType("char(32)")
                        .IsFixedLength(true)
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<decimal>("Prix")
                        .HasColumnName("PRIX")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("IdFilm");

                    b.HasIndex("IdDistributeur");

                    b.HasIndex("IdLangue");

                    b.HasIndex("IdNationalite");

                    b.HasIndex("IdSousTitre");

                    b.ToTable("FILM");
                });

            modelBuilder.Entity("MovieToGo.Models.FilmPossede", b =>
                {
                    b.Property<short>("IdFilmPossede")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_FILM_POSSEDE")
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("IdFilm")
                        .HasColumnName("ID_FILM")
                        .HasColumnType("smallint");

                    b.Property<short>("IdUser")
                        .HasColumnName("ID_USER")
                        .HasColumnType("smallint");

                    b.HasKey("IdFilmPossede");

                    b.HasIndex("IdFilm");

                    b.HasIndex("IdUser");

                    b.ToTable("FILM_POSSEDE");
                });

            modelBuilder.Entity("MovieToGo.Models.Genre", b =>
                {
                    b.Property<short>("IdGenre")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_GENRE")
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnName("NOM")
                        .HasColumnType("char(32)")
                        .IsFixedLength(true)
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("IdGenre");

                    b.ToTable("GENRE");
                });

            modelBuilder.Entity("MovieToGo.Models.Joue", b =>
                {
                    b.Property<short>("IdActeur")
                        .HasColumnName("ID_ACTEUR")
                        .HasColumnType("smallint");

                    b.Property<short>("IdFilm")
                        .HasColumnName("ID_FILM")
                        .HasColumnType("smallint");

                    b.HasKey("IdActeur", "IdFilm");

                    b.HasIndex("IdFilm");

                    b.ToTable("JOUE");
                });

            modelBuilder.Entity("MovieToGo.Models.Langue", b =>
                {
                    b.Property<short>("IdLangue")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_LANGUE")
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnName("NOM")
                        .HasColumnType("char(32)")
                        .IsFixedLength(true)
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("IdLangue");

                    b.ToTable("LANGUE");
                });

            modelBuilder.Entity("MovieToGo.Models.List", b =>
                {
                    b.Property<short>("IdList")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_LIST")
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("IdUser")
                        .HasColumnName("ID_USER")
                        .HasColumnType("smallint");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnName("NOM")
                        .HasColumnType("char(32)")
                        .IsFixedLength(true)
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("IdList");

                    b.HasIndex("IdUser");

                    b.ToTable("LIST");
                });

            modelBuilder.Entity("MovieToGo.Models.ListF", b =>
                {
                    b.Property<short>("IdListF")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_LIST_F")
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("IdFilm")
                        .HasColumnName("ID_FILM")
                        .HasColumnType("smallint");

                    b.Property<short>("IdList")
                        .HasColumnName("ID_LIST")
                        .HasColumnType("smallint");

                    b.HasKey("IdListF");

                    b.HasIndex("IdFilm");

                    b.HasIndex("IdList");

                    b.ToTable("LIST_F");
                });

            modelBuilder.Entity("MovieToGo.Models.Nationalite", b =>
                {
                    b.Property<short>("IdNationalite")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_NATIONALITE")
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnName("NOM")
                        .HasColumnType("char(32)")
                        .IsFixedLength(true)
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("IdNationalite");

                    b.ToTable("NATIONALITE");
                });

            modelBuilder.Entity("MovieToGo.Models.Note", b =>
                {
                    b.Property<short>("IdNote")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_NOTE")
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("IdFilm")
                        .HasColumnName("ID_FILM")
                        .HasColumnType("smallint");

                    b.Property<short>("IdUser")
                        .HasColumnName("ID_USER")
                        .HasColumnType("smallint");

                    b.Property<byte>("Note1")
                        .HasColumnName("NOTE")
                        .HasColumnType("tinyint");

                    b.HasKey("IdNote");

                    b.HasIndex("IdFilm");

                    b.HasIndex("IdUser");

                    b.ToTable("NOTE");
                });

            modelBuilder.Entity("MovieToGo.Models.Realisateur", b =>
                {
                    b.Property<short>("IdRealisateur")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_REALISATEUR")
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnName("NOM")
                        .HasColumnType("char(32)")
                        .IsFixedLength(true)
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnName("PRENOM")
                        .HasColumnType("char(32)")
                        .IsFixedLength(true)
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("IdRealisateur");

                    b.ToTable("REALISATEUR");
                });

            modelBuilder.Entity("MovieToGo.Models.Realise", b =>
                {
                    b.Property<short>("IdRealisateur")
                        .HasColumnName("ID_REALISATEUR")
                        .HasColumnType("smallint");

                    b.Property<short>("IdFilm")
                        .HasColumnName("ID_FILM")
                        .HasColumnType("smallint");

                    b.HasKey("IdRealisateur", "IdFilm");

                    b.HasIndex("IdFilm");

                    b.ToTable("REALISE");
                });

            modelBuilder.Entity("MovieToGo.Models.SousTitre", b =>
                {
                    b.Property<short>("IdSousTitre")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_SOUS_TITRE")
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnName("NOM")
                        .HasColumnType("char(32)")
                        .IsFixedLength(true)
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("IdSousTitre");

                    b.ToTable("SOUS_TITRE");
                });

            modelBuilder.Entity("MovieToGo.Models.Utilisateur", b =>
                {
                    b.Property<short>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_USER")
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("EMAIL")
                        .HasColumnType("char(32)")
                        .IsFixedLength(true)
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<short>("IdDroit")
                        .HasColumnName("ID_DROIT")
                        .HasColumnType("smallint");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnName("NOM")
                        .HasColumnType("char(32)")
                        .IsFixedLength(true)
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("PASSWORD")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnName("PRENOM")
                        .HasColumnType("char(32)")
                        .IsFixedLength(true)
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Pseudo")
                        .IsRequired()
                        .HasColumnName("PSEUDO")
                        .HasColumnType("char(32)")
                        .IsFixedLength(true)
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<bool>("Statut")
                        .HasColumnName("STATUT")
                        .HasColumnType("bit")
                        .HasComment("actif/non actif (ban)");

                    b.HasKey("IdUser");

                    b.HasIndex("IdDroit");

                    b.ToTable("UTILISATEUR");
                });

            modelBuilder.Entity("MovieToGo.Models.Wishlist", b =>
                {
                    b.Property<short>("IdWishlist")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_WISHLIST")
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("IdFilm")
                        .HasColumnName("ID_FILM")
                        .HasColumnType("smallint");

                    b.Property<short>("IdUser")
                        .HasColumnName("ID_USER")
                        .HasColumnType("smallint");

                    b.HasKey("IdWishlist");

                    b.HasIndex("IdFilm");

                    b.HasIndex("IdUser");

                    b.ToTable("WISHLIST");
                });

            modelBuilder.Entity("MovieToGo.Models.Commentaire", b =>
                {
                    b.HasOne("MovieToGo.Models.Film", "IdFilmNavigation")
                        .WithMany("Commentaire")
                        .HasForeignKey("IdFilm")
                        .HasConstraintName("FK_COMMENTAIRE_FILM")
                        .IsRequired();

                    b.HasOne("MovieToGo.Models.Utilisateur", "IdUserNavigation")
                        .WithMany("Commentaire")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK_COMMENTAIRE_UTILISATEUR")
                        .IsRequired();
                });

            modelBuilder.Entity("MovieToGo.Models.FaitPartie", b =>
                {
                    b.HasOne("MovieToGo.Models.Film", "IdFilmNavigation")
                        .WithMany("FaitPartie")
                        .HasForeignKey("IdFilm")
                        .HasConstraintName("FK_FAIT_PARTIE_FILM")
                        .IsRequired();

                    b.HasOne("MovieToGo.Models.Genre", "IdGenreNavigation")
                        .WithMany("FaitPartie")
                        .HasForeignKey("IdGenre")
                        .HasConstraintName("FK_FAIT_PARTIE_GENRE")
                        .IsRequired();
                });

            modelBuilder.Entity("MovieToGo.Models.Film", b =>
                {
                    b.HasOne("MovieToGo.Models.Distributeur", "IdDistributeurNavigation")
                        .WithMany("Film")
                        .HasForeignKey("IdDistributeur")
                        .HasConstraintName("FK_FILM_DISTRIBUTEUR")
                        .IsRequired();

                    b.HasOne("MovieToGo.Models.Langue", "IdLangueNavigation")
                        .WithMany("Film")
                        .HasForeignKey("IdLangue")
                        .HasConstraintName("FK_FILM_LANGUE")
                        .IsRequired();

                    b.HasOne("MovieToGo.Models.Nationalite", "IdNationaliteNavigation")
                        .WithMany("Film")
                        .HasForeignKey("IdNationalite")
                        .HasConstraintName("FK_FILM_NATIONALITE")
                        .IsRequired();

                    b.HasOne("MovieToGo.Models.SousTitre", "IdSousTitreNavigation")
                        .WithMany("Film")
                        .HasForeignKey("IdSousTitre")
                        .HasConstraintName("FK_FILM_SOUS_TITRE")
                        .IsRequired();
                });

            modelBuilder.Entity("MovieToGo.Models.FilmPossede", b =>
                {
                    b.HasOne("MovieToGo.Models.Film", "IdFilmNavigation")
                        .WithMany("FilmPossede")
                        .HasForeignKey("IdFilm")
                        .HasConstraintName("FK_FILM_POSSEDE_FILM")
                        .IsRequired();

                    b.HasOne("MovieToGo.Models.Utilisateur", "IdUserNavigation")
                        .WithMany("FilmPossede")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK_FILM_POSSEDE_UTILISATEUR")
                        .IsRequired();
                });

            modelBuilder.Entity("MovieToGo.Models.Joue", b =>
                {
                    b.HasOne("MovieToGo.Models.Acteurs", "IdActeurNavigation")
                        .WithMany("Joue")
                        .HasForeignKey("IdActeur")
                        .HasConstraintName("FK_JOUE_ACTEURS")
                        .IsRequired();

                    b.HasOne("MovieToGo.Models.Film", "IdFilmNavigation")
                        .WithMany("Joue")
                        .HasForeignKey("IdFilm")
                        .HasConstraintName("FK_JOUE_FILM")
                        .IsRequired();
                });

            modelBuilder.Entity("MovieToGo.Models.List", b =>
                {
                    b.HasOne("MovieToGo.Models.Utilisateur", "IdUserNavigation")
                        .WithMany("List")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK_LIST_UTILISATEUR")
                        .IsRequired();
                });

            modelBuilder.Entity("MovieToGo.Models.ListF", b =>
                {
                    b.HasOne("MovieToGo.Models.Film", "IdFilmNavigation")
                        .WithMany("ListF")
                        .HasForeignKey("IdFilm")
                        .HasConstraintName("FK_LIST_F_FILM")
                        .IsRequired();

                    b.HasOne("MovieToGo.Models.List", "IdListNavigation")
                        .WithMany("ListF")
                        .HasForeignKey("IdList")
                        .HasConstraintName("FK_LIST_F_LIST")
                        .IsRequired();
                });

            modelBuilder.Entity("MovieToGo.Models.Note", b =>
                {
                    b.HasOne("MovieToGo.Models.Film", "IdFilmNavigation")
                        .WithMany("Note")
                        .HasForeignKey("IdFilm")
                        .HasConstraintName("FK_NOTE_FILM")
                        .IsRequired();

                    b.HasOne("MovieToGo.Models.Utilisateur", "IdUserNavigation")
                        .WithMany("Note")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK_NOTE_UTILISATEUR")
                        .IsRequired();
                });

            modelBuilder.Entity("MovieToGo.Models.Realise", b =>
                {
                    b.HasOne("MovieToGo.Models.Film", "IdFilmNavigation")
                        .WithMany("Realise")
                        .HasForeignKey("IdFilm")
                        .HasConstraintName("FK_REALISE_FILM")
                        .IsRequired();

                    b.HasOne("MovieToGo.Models.Realisateur", "IdRealisateurNavigation")
                        .WithMany("Realise")
                        .HasForeignKey("IdRealisateur")
                        .HasConstraintName("FK_REALISE_REALISATEUR")
                        .IsRequired();
                });

            modelBuilder.Entity("MovieToGo.Models.Utilisateur", b =>
                {
                    b.HasOne("MovieToGo.Models.Droit", "IdDroitNavigation")
                        .WithMany("Utilisateur")
                        .HasForeignKey("IdDroit")
                        .HasConstraintName("FK_UTILISATEUR_DROIT")
                        .IsRequired();
                });

            modelBuilder.Entity("MovieToGo.Models.Wishlist", b =>
                {
                    b.HasOne("MovieToGo.Models.Film", "IdFilmNavigation")
                        .WithMany("Wishlist")
                        .HasForeignKey("IdFilm")
                        .HasConstraintName("FK_WISHLIST_FILM")
                        .IsRequired();

                    b.HasOne("MovieToGo.Models.Utilisateur", "IdUserNavigation")
                        .WithMany("Wishlist")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK_WISHLIST_UTILISATEUR")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
